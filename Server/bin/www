#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var bcrypt = require('bcrypt')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Conntxt to db
  */
var sequelize = require('../sequelize');
async function dbinit() {
  console.log(`Checking database connection...`);
  try {
    await sequelize.authenticate();
    console.log('Database connection OK!');
  } catch (error) {
    console.log('Unable to connect to the database:');
    console.log(error.message);
    process.exit(1);
  }
  console.log(`Starting Sequelize...`);

  await sequelize.sync()
    .then(() => {
      console.log(`Database connected`);
    });
  if ((await sequelize.models.admin.count()).valueOf()==0){
    //create a admin user
    var salt = await bcrypt.genSalt(8);
    var psd = await bcrypt.hash(process.env.ADMIN_PASSWORD || 'examplepassword', salt);
    console.log(psd)
    await sequelize.models.admin.create(
      { username: process.env.ADMIN_ACCOUNT || 'admin',
        password: psd}
    )
    console.log("initial admin...")
  }
}
dbinit()
/**
 * Get daemon server from environment or not.
 */
// const fs=require('fs')
// var f='../config/daemon.connect.config.js'
// let api = process.env.DB_CONNECTION? process.env.DB_CONNECTION:"http://localhost:8880"
// let data =`var config = "`+api+`"\n
// module.exports = config;`

// fs.writeFile(f,data,(e)=>{
//   console.log(e)
// })
// if(process.env.DB_CONNECTION){
//   console.log("test success")
//   // rewrite daemon server address
//   api= 

// }else{
//   console.log("test fail")

// }

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
